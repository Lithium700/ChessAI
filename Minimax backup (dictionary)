using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class Minimax : MonoBehaviour
{
    public Board board;
    public int checkedPositions;
    public Dictionary<Piece, List<BoardPiece>> possibleMoves = new Dictionary<Piece, List<BoardPiece>>();
    public Dictionary<Piece, List<int>> moveValues = new Dictionary<Piece, List<int>>();

    public Text checkedPositionsText;

    public void playTurn()
    {
        checkAllMoves();
    }

    void checkAllMoves()
    {
        foreach (GameObject piece in board.blackPieces)
        {
            Piece pieceComponent = piece.GetComponent<Piece>();
            pieceComponent.CalculateMoves();
            checkedPositions += pieceComponent.moves.Count;
            foreach (BoardPiece move in pieceComponent.moves)
            {
                if (!possibleMoves.ContainsKey(pieceComponent))
                {
                    possibleMoves[pieceComponent] = new List<BoardPiece> { move };
                }
                else
                {
                    possibleMoves[pieceComponent].Add(move);
                }
            }

            board.ResetBoardState();
        }

        checkedPositionsText.text = "Checked positions\n" + checkedPositions;
        evaluateMoves();
    }

    void evaluateMoves()
    {
        foreach (var entry in possibleMoves)
        {
            Piece piece = entry.Key;
            List<BoardPiece> moves = entry.Value;

            foreach (BoardPiece move in moves)
            {
                List<GameObject> blackPiecesSave = new List<GameObject>(board.blackPieces);
                List<GameObject> whitePiecesSave = new List<GameObject>(board.whitePieces);
                board.updatePositions(move.pos, move.castles, piece, true);
                int blackScore = 0;
                int whiteScore = 0;
                foreach (GameObject p in board.whitePieces)
                {
                    whiteScore += p.GetComponent<Piece>().value;
                }
                foreach (GameObject p in board.blackPieces)
                {
                    blackScore += p.GetComponent<Piece>().value;
                }
                moveValues[piece].Add(blackScore - whiteScore);
                board.blackPieces = blackPiecesSave;
                board.whitePieces = whitePiecesSave;
            }
        }
        calculateBestMove();
    }

    void calculateBestMove()
    {

    }
}
